#!/usr/bin/env python

# Copyright (c) 2009-2012 Martin Gracik
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Author(s):    Martin Gracik <martin@gracik.me>
#

from __future__ import print_function

import argparse
import os
import random


DEFAULT_LENGTH = 2
DEFAULT_COUNT = 10
DICT = '/usr/share/dict/words'


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--length', type=int, default=DEFAULT_LENGTH,
                        metavar='N', help='passphrase length')
    parser.add_argument('-c', '--count', type=int, default=DEFAULT_COUNT,
                        metavar='N', help='number of passphrases')
    return parser.parse_args()


def main():
    args = parse_args()
    with open(DICT, 'r') as fileobj:
        words = fileobj.readlines()

    # Remove words containing "'".
    words = set(word.strip().lower() for word in words if "'" not in word)

    for i in range(args.count):
        passphrase = random.sample(words, args.length)
        print(' '.join(passphrase))


if __name__ == '__main__':
    main()
